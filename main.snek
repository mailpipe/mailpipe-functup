from functup import print, Response, FileResponse, get_channel, APIClient
import html
import json
import re2
import hashlib


def base(request, title, body):
    return rf'''<!doctype html>
<html lang="en">
  <head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">

    <title>{ title } | Mailpipe</title>
  </head>
  <body>
<nav class="navbar navbar-expand-md navbar-light bg-light">
    <div class="navbar-collapse collapse w-100 order-1 order-md-0 dual-collapse2">
        <ul class="navbar-nav mr-auto">
            <li class="nav-item active">
                <a class="nav-link" href="/">Home</a>
            </li>
        </ul>
    </div>
    <div class="mx-auto order-0">
        <a class="navbar-brand mx-auto" href="#">Mailpipe</a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target=".dual-collapse2">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
    <div class="navbar-collapse collapse w-100 order-3 dual-collapse2">
        <ul class="navbar-nav ml-auto">
      { fr"""
          <form class="form-inline" action="/_logout" method="POST">
            <button class=" btn btn-danger" type="submit">Logout</button>
            { csrf_input }
          </form>
        """ if request['user']['username'] else """
          <li class="nav-item ">
              <a class="nav-link" href="/_login">Log in</a>
          </li>
          <li class="nav-item ">
              <a class="btn btn-primary" href="/_join">Join Functup</a>
          </li>
        """ }
    </ul>
    </div>
</nav>
    <div class="container">
        { body }
    </div>


    <!-- Optional JavaScript -->
    <!-- jQuery first, then Popper.js, then Bootstrap JS -->
    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
    { (request['user']['username']=='tim-admin' and rf"""<pre>{ json.dumps(request, indent=2) } </pre>""") or " " }
  </body>
</html>
    '''


def add_address_form(request, errors):
    return rf"""
    <div class="row">
        <div class="col">
            <h1>Email Addresses</h1>
        </div>
    </div>
    <div class="row">
        <div class="col">
            <form action="." method="POST" class="form-inline">
                <label for="email">Email address</label>
                <div class="form-group  mx-sm-3 mb-1">
                    <input type="text" class="form-control  { "is-invalid" if 'address' in errors else ""  }" id="email" name="email" placeholder="email@mailpipe.io" value="{ request['data'].get('email', '') }">
                    { 'address' in errors and rf'''
                        <div class="invalid-tooltip">
                            { "<br>".join(errors['address']) }
                        </div>
                    ''' or " " }
                </div>
               <button type="submit" class="btn btn-primary mb-2">Add</button>
               { csrf_input }
            </form>
        </div>
    </div>
"""


def get_email_details(email_address):
    client = APIClient()
    r = client.get(f"/_emails/{email_address}")
    return r["json"]


def render_address(data):
    d = data["data"]
    details = get_email_details(d["email"])
    url = f'/{ d["email"] }'
    return fr"""

    <tr><td>{ d['email'] }</td> <td>emails: { details["message_count"] }</td><td>{ int(details["messege_length_sum"] / 1000) } Kb</td><td><a href="{ url }">details</a></td></tr>
    """


def make_safe(data):
    return json.loads(html.escape(json.dumps(data), quote=False))


def list_addresses(address_list):
    address_list = make_safe(address_list)
    return fr"""
    <div class="row">
        <div class="col">
            <table class="table table-sm">
                { ''.join(render_address(e) for e in address_list) } 
            </table>
        </div>
    </div>
    """

def delete_email(email):
    client = APIClient()
    r1 = None
    r2 = None
    r1 = client.delete("/_data?data__email=" + email)
    if r1["status_code"] == 204:
        r2 = client.delete(f"/_emails/{ email }")
        if r2["status_code"] == 204:
            return None
    return {"error": [email, r1, r2]}

def delete_message(email, message_id):
    client = APIClient()
    r2 = None
    r2 = client.delete(f"/_emails/{ email }/msg/{ message_id }")
    if r2["status_code"] == 204:
        return None
    return {"error": [email, r2]}


def add_email(request):
    client = APIClient()
    email = request["data"].get("email")
    email_account_hash = hashlib.sha1(email.encode()).hexdigest()
    owner = request["user"]["username"]
    email_path = f"v1/emails/{email_account_hash}"
    r = client.post("/_emails.json", {"address": email})
    if r["status_code"] == 201:
        r = client.post(
            "/_data.json",
            {"path": email_path, "data": {"email": email, "owner": owner}},
        )
        if r["status_code"] == 201:
            return None
    return r["json"]


def home(request):
    if not request["user"]["id"]:
        return Response(
            base(
                request=request,
                title="Login",
                body="hi there stranger, why don't you log in?",
            )
        )

    error = {}
    if request["method"] == "POST":
        error = add_email(request)
        if not error:
            return Response(status=302, headers={"location": "/"})

    client = APIClient()
    r = client.get(
        f"/_data?data__owner={request['user']['username']}&path__startswith=v1/emails"
    )
    address_list = r["json"]["results"]

    return Response(
        base(
            request=request,
            title="Emails",
            body=add_address_form(request, error) + list_addresses(address_list),
        )
    )


def delete(request, email):
    if not request["user"]["id"]:
        return Response(
            base(
                request=request,
                title="Login",
                body="hi there stranger, why don't you log in?",
            )
        )

    client = APIClient()
    if request["method"] == "POST":
        if not error:
            return Response(status=302, headers={"location": "/"})


def edit(request, path):
    if not request["user"]["username"] in ["tim-admin", "tim"]:
        return Response("Not authorized")
    preview_url = request["query_params"].get("preview", path)
    if request["method"] == "POST":
        new_data = request["data"].get("data")
        new_data_resp = APIClient().put(
            "/_data/" + path, {"path": path, "data": new_data}
        )
        if new_data_resp["status_code"] == 200:
            return Response(
                headers={
                    "location": f"{ request['path'] }?preview={preview_url or '/'}"
                },
                status=302,
            )
        return Response(new_data_resp, content_type="application/json")
    files = APIClient().get("/_data?path__startswith=" + path)
    data = {"path": path, "preview_url": preview_url, "files": files["json"]}
    return Response(data, template_name="edit.html")


def email_detail(email_data):
    return rf"""
    <div class="row">
        <div class="col">
            <h2>{ email_data['address'] }</h2>
            <form action="" method="POST">
                <input type="submit" name="delete" value="delete" >
                <input type="hidden" name="email" value="{ email_data['address'] }" >
                { csrf_input }
            </form>
        </div>
    </div> """


def render_message(e):
    return fr"""
    <div class="card">
  <div class="card-body">
  From: { e['frm'] }<br>
  To: { e['to'] }<br>
    Attachments:</br>
  { ''.join(rf'<a href="#" class="card-link">{ a["filename"] }</a>' for a in e['attachments']) }  
      <a href="{e['id']}/" class="btn btn-primary">Read Full</a>
            <form action="/{ e['account'] }/{ e['id'] }/" method="POST">
                <input type="submit" name="delete" value="delete" >
                { csrf_input }
            </form>
  </div>
</div>
    """


def render_full_message(e):
    return fr"""
    <div class="card">
  <div class="card-body">
  From: { e['frm'] }<br>
  To: { e['to'] }<br>
  Text:</br>
    <p class="card-text">{ e['text'] }</p>
  Html:</br>
    <p class="card-text">{ e['html'] }</p>
    Attachments:</br>
  { ''.join(rf'<a href="#" class="card-link">{ a["filename"] }</a>' for a in e['attachments']) }  
  </div>
</div>
    """


def message_list(messages):
    messages = make_safe(messages)
    return fr"""
    <div class="row">
        <div class="col">
                { ''.join(render_message(e) for e in messages['results']) } 
        </div>
    </div>
    """


def message(request, email, message_id):
    client = APIClient()
    if not request["user"]["id"]:
        return Response(
            f"""<html><a href="/_login?next={ request['path'] }"> Log in required.</a>"""
        )

    owner = request["user"]["username"]
    data = owns_email(owner, email)
    if not data:
        return Response(
            base(request=request, title="Not found", body=f"<h1>Not Found</h1>"),
            status=404,
        )
    email = data["email"]
    message = client.get(f"/_emails/{email}/msg/{message_id}")["json"]
    if request["method"] == "POST" and "delete" in request["data"]:
        error = delete_message(email, message_id)
        if not error:
            return Response(status=302, headers={"location": fr"/{ email }/"})
        return Response(error)


    return Response(base(request=request, title=message["subject"], body=render_full_message(message)))


def owns_email(owner, email):
    client = APIClient()
    email_resp = client.get(f"/_data?data__email={email}")
    if (
        email_resp["status_code"] != 200
        or email_resp["json"]["count"] != 1
        or email_resp["json"]['results'][0]["data"].get("owner", None) != owner
    ):
        return False
    return email_resp["json"]['results'][0]["data"]


def details(request, email):
    if not request["user"]["id"]:
        return Response(
            f"""<html><a href="/_login?next={ request['path'] }"> Log in required.</a>"""
        )
    owner = request["user"]["username"]
    client = APIClient()

    data = owns_email(owner, email)
    if not data:
        return Response(
            base(request=request, title="Not found", body=f"<h1>Not Found</h1>"),
            status=404,
        )

    if request["method"] == "POST" and "delete" in request["data"]:
        error = delete_email(request["data"]["email"])
        if not error:
            return Response(status=302, headers={"location": "/"})
        return Response(error)

    email = data["email"]
    messages = client.get(f"/_emails/{email}/msg")["json"]
    return Response(
        base(
            request=request,
            title=email,
            body=email_detail(get_email_details(email))
            + message_list(messages),
        )
    )


urls = [
    (r"/$", home),
    (r"/(?P<email>[^/]+)/$", details),
    (r"/(?P<email>[^/]+)/(?P<message_id>[0-9]+)/$", message),
]


def handle(request):
    for path_re, view in urls:
        m = re2.match(path_re, request["path"])
        if m:
            return view(request, **m.groupdict())

    if request['path'].endswith('/'):
        return Response("not found", status=404)
    return Response(status=302, headers={"location": request['path'] + "/"})

get = handle
post = handle
delete = handle


def http_error(data):
    return Response(json.dumps({"an error": data}), content_type="application/json")


def template_error(exception):
    return json.dumps({"exception_data": exception})


def test_home():
    resp = handle({"path": "/", "user": {"username": "", "id": None}})
    resp = handle({"path": "/", "user": {"username": "bob2", "id": 2}})


def test_emails():
    resp = handle({"path": "/e/foo@example.com"})


def test_404():
    resp = handle({"path": "/non-existant"})


def test_http_error():
    resp = http_error({"some": "data"})
