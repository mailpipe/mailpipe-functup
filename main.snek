# vim: syntax=python


import base64
from functup import print, Response, FileResponse, get_channel, APIClient, settings
import html
from datetime import datetime
import arrow
import json
from decimal import Decimal

import re2
import hashlib
from io import BytesIO

client = APIClient()

RATE = {"sats_per_address": 10000, "sats_per_byte": 1, "sats_per_message": 100}
BTC = Decimal(10 ** 8)


def base(request, title, body):
    return f'''<!doctype html>
<html lang="en">
  <head>
    <!-- Required meta tags -->
    <link rel="icon" href="/favicon.ico" type="image/x-icon" />

    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <script src="https://payme.functup.com/modal/btcpay.js"></script>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">

    <title>{ title } | Mailpipe</title>
  </head>
  <body class="">
    <div class="cover-container d-flex w-100 p-3 mx-auto flex-column flex-shrink-0">
  <header class="masthead mb-auto">
    <div class="inner">
      <h3 class="masthead-brand text-center">Mailpipe</h3>
      <nav class="nav nav-masthead justify-content-center">
        <a class="nav-link active" href="#">Home</a>
        <a class="nav-link" href="/fe">Features</a>

      { fr"""
          <form class="form-inline" action="/_logout" method="POST">
            <button class=" btn nav-link " type="submit">Logout { request['user']['username']}</button>
            { csrf_input }
          </form>
        """ if request['user']['username'] else """
              <a class="nav-link" href="/_login">Log in</a>
        """ }
    
      </nav>
    </div>
  </header>

    <main role="main" class="flex-shrink-0">
        <div class="container">
            { body }
        </div>
    </main>
</div>

  <footer class="footer mt-auto py-3 justify-content-center text-center">
      <p class="text-muted">Copyright 2019 - <a href="https://github.com/readevalprint/mailpipe-functup">Open Source</a> MIT License | <a href="https://twitter.com/mailpipe">@mailpipe</a></p>
  </footer>




    <!-- Optional JavaScript -->
    <!-- jQuery first, then Popper.js, then Bootstrap JS -->
    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
  </body>
</html>
    '''


def add_address_form(request, errors):
    return rf"""
    <div class="row">
        <div class="col">
            <h1>Email Addresses</h1>
        </div>
    </div>
    <div class="row">
        <div class="col">
            <form action="." method="POST" class="form-inline">
                <label for="email">Email address</label>
                <div class="form-group  mx-sm-3 mb-1">
                    <input type="text" class="form-control  { "is-invalid" if 'address' in errors else ""  }" id="email" name="email" placeholder="email@mailpipe.io" value="{ request['data'].get('email', '') }">
                    { 'address' in errors and rf'''
                        <div class="invalid-tooltip">
                            { "<br>".join(errors['address']) }
                        </div>
                    ''' or " " }
                </div>
               <button type="submit" class="btn btn-primary mb-2">Add</button>
               { csrf_input }
            </form>
        </div>
    </div>
"""


def get_email_details(email_address):
    r = client.get(f"/_emails/{email_address}/")
    return r["json"]


def render_address(d):
    url = f'/{ d["address"] }'
    return fr"""
    <tr><td>{ d['address'] }</td> <td>emails: { d.get("message_count", 'no count') }</td><td>{ int(d.get("messege_length_sum", -1) / 1000) } Kb</td><td><a href="{ url }">details</a></td></tr>
    """


def make_safe(data):
    return json.loads(html.escape(json.dumps(data), quote=False))


def list_addresses(address_list):
    address_list = make_safe(address_list)
    if not address_list:
        return "Why not create your first email address?"
    return fr"""
    <div class="row">
        <div class="col">
            <table class="table table-sm">
                { ''.join(render_address(e) for e in address_list) } 
            </table>
        </div>
    </div>
    """


def delete_email(email):
    r2 = None
    r2 = client.delete(f"/_emails/{ email }/")
    if r2["status_code"] == 204:
        return None
    return {"error": [email, r1, r2]}


def delete_message(email, message_uuid):
    r2 = None
    r2 = client.delete(f"/_emails/{ email }/msg/{ message_uuid }/")
    if r2["status_code"] == 204:
        return None
    return {"error": [email, r2]}


def add_email(request):
    email = request["data"].get("email").strip()
    email_account_hash = hashlib.sha1(email.encode()).hexdigest()
    user_id = request["user"]["id"]
    email_path = f"v1/emails/{email_account_hash}"
    r = client.post("/_emails/", {"address": email, "user_id": user_id})
    if r["status_code"] == 201:
        return None
    return r["json"]


def get_or_create_account(user_id):
    results = client.get(f"/_accounts/?user_id={user_id}")["json"]["results"]
    if not results:
        client.post(
            f"/_accounts/", {"user_id": user_id, "name": f"account for {user_id}"}
        )["json"]
        results = client.get(f"/_accounts/?user_id={user_id}")["json"]["results"]
    return results[0]


def get_or_create_profile(user_id):
    profile_res = client.get(f"/_data/v1/profile/{user_id}")
    if profile_res["status_code"] == 200:
        return profile_res["json"]
    return client.post(
        "/_data",
        data={"path": f"v1/profile/{user_id}", "data": {"created": datetime.now()}},
    )["json"]


def account_info(request, account, current_usage, profile, errors):
    present = arrow.utcnow()
    last_invoice = profile["data"].get("invoice", None)
    invoice_link = ""
    if last_invoice:
        last_invoice = client.get(
            f"/_accounts/{account['uuid']}/get_invoice/?invoice_id={last_invoice['id']}"
        )["json"]
        if last_invoice["expirationTime"] > last_invoice["currentTime"]:
            invoice_link = f"""Please pay invoice <a href="{last_invoice['url']}">{last_invoice['url']}</a>"""
        else:
            last_invoice = None
        profile["data"]["invoice"] = last_invoice
        profile = client.patch(profile["url"], data={"data": profile["data"]})["json"]
    result = ""
    result = (
        result
        + rf"""
    <div class="row">
        <div class="col">
            <form action="." method="POST" class="form-inline">
                <label for="amount">Amount</label>
                <div class="form-group  mx-sm-3 mb-1">
                   <input name="amount"  id="amount" class="form-control { "is-invalid" if 'amount' in errors else ""  }" value="{ request['data'].get('amount', '') }">
                { 'amount' in errors and rf'''
                    <div class="invalid-tooltip">
                        { errors['amount'] }
                    </div>
                ''' or " " }
                </div>
               { csrf_input }
                <button type="submit" class="btn btn-primary mb-2"  {'disabled' if invoice_link else ''}>Top up</button>
            </form>
        { invoice_link }
        </div>
    </div>
    """
    )

    result = (
        result
        + rf"""
    <div class="row">
        <div class="col">
            <p>
                Current balance: { '%.8f' % (account['simple_balance'].get('BTC'),) } BTC </br>
                Account ID: { account['uuid']}  <br>
                Addresses: { current_usage['num_addresses'] } @ { '%.8f' % (current_usage['sats_per_address'] / BTC) } BTC/day <br>
                Messages: { current_usage['message_count'] } @ { '%.8f' % (current_usage['sats_per_message'] / BTC) } BTC/day<br>
                Data usage: { int(current_usage['messege_length_sum'] / 1000) }KB @ { current_usage['sats_per_byte']  } sat/byte <br>
                Next billing cycle: { current_usage['next_billing_cycle'].humanize() } <br>
                Estimated billing amount: { '%.8f' % (current_usage['sats_total'] / BTC)  } BTC <br>
            </p>
        </div>
    </div>
    """
    )

    return result


def topup(request, user_id, profile, account):
    amount = request["data"].get("amount", None) or request["query_params"].get(
        "amount", "0.01"
    )
    amount = float(amount.strip())
    if amount < 0.00001 or amount > 0.1:
        return {"amount": "Amount must be between 0.1 and 0.00001"}

    r = client.post(
        account["create_invoice_url"],
        data={
            "price": amount,
            "currency": "BTC",
            "redirectURL": "https://mailpipe.192.168.99.101.xip.io/",
            "notificationURL": "",
            "orderId": "",
            "itemDescription": "top up",
            "itemCode": "",
            "physical": False,
            "buyerName": "",
            "buyerAddress1": "",
            "buyerAddress2": "",
            "buyerCity": "",
            "buyerState": "",
            "buyerZip": "",
            "buyerCountry": "",
            "buyerEmail": "",
            "buyerPhone": "",
        },
    )
    if r["status_code"] == 200:
        profile["data"]["invoice"] = r["json"]
        r = client.patch(profile["url"], data={"data": profile["data"]})
        if r["status_code"] == 200:
            return None
    return r["json"]


def demo_data():
    return rf"""
  <main role="main" class="inner cover text-center">
    <h1 class="cover-heading">Disposiable Email addresses.</h1>
    <p class="lead">Instantly buy custom email addresses with bitcoin</p>
    <p class="lead">
      <a href="#" class="btn btn-lg btn-secondary">Learn more</a>
    </p>
  </main>
    """


def home(request):
    user_id = request["user"]["id"]
    if not user_id:
        return Response(base(request=request, title="Welcome", body=demo_data()))

    # should only be one but you never know
    account = get_or_create_account(user_id)
    profile = get_or_create_profile(user_id)
    errors = {}
    if request["method"] == "POST":
        if "email" in request["data"]:
            errors = add_email(request)
            if not errors:
                return Response(status=302, headers={"location": "/"})
        if "amount" in request["data"]:
            errors = topup(request, user_id, profile, account)
            if not errors:
                return Response(status=302, headers={"location": "/"})

    next_page = f"/_data?data__owner={request['user']['username']}&path__startswith=v1/emails&page_size=10000"
    # next_page = False
    while next_page:
        old_data_resp = client.get(next_page)
        old_address_list = old_data_resp["json"]["results"]
        for oa in old_address_list:
            r = client.patch(f"/_emails/{oa['data']['email']}/", {"user_id": user_id})
            client.delete(oa["url"])
        next_page = old_data_resp["json"]["next"]

    emails = user_emails(user_id)
    current_usage = get_current_usage(emails)
    return Response(
        base(
            request=request,
            title="Emails",
            body=(
                account_info(request, account, current_usage, profile, errors)
                + add_address_form(request, errors)
                + list_addresses(emails)
            ),
        )
    )


def delete(request, email):
    if not request["user"]["id"]:
        return Response(
            base(
                request=request,
                title="Login",
                body="hi there stranger, why don't you log in?",
            )
        )

    if request["method"] == "POST":
        if not error:
            return Response(status=302, headers={"location": "/"})
        return Response(error, status=400)


def email_detail(email_data):
    if "address" not in email_data:
        return """<div class="alert alert-danger" role="alert"> No messages </div>"""
    return rf"""
    <div class="row">
        <div class="col">
            <h2>{ email_data['address'] }</h2>
            <form action="" method="POST">
                <input type="submit" name="delete" value="delete { email_data["address"] }" class="btn btn-outline-danger ">
                { csrf_input }
            </form>
        </div>
    </div> """


def render_message(e):
    return fr"""
    <div class="card">
  <div class="card-body">
  <p class="card-text">
  From: { e['frm'] }<br>
  To: { e['to'] }<br>
  Subject: { e['subject'] }<br>
    Attachments:</br>
  { ''.join(rf'<a href="/{ e["account"] }/{ e["uuid"] }/{a["index"] }/{a["filename"]}" class="card-link">{ a["filename"] }</a>' for a in e['attachments']) }  
<br>
  Text:</br>
    <p class="card-text">{ e['text'] }</p>
  </p>
    <form action="/{ e['account'] }/{ e['uuid'] }/" method="POST"  class="form-inline">
        <input type="submit" name="delete" value="delete" class="btn btn-outline-danger btn-sm">
        { csrf_input }
    </form>
  </div>
</div>
    """


def render_full_message(e):
    return fr"""
    <div class="card">
  <div class="card-body">
  From: { e['frm'] }<br>
  To: { e['to'] }<br>
  To: { e['subject'] }<br>
  Text:</br>
    <p class="card-text">{ e['text'] }</p>
    Attachments:</br>
  { ''.join(rf'<a href="/{ e["account"] }/{ e["uuid"] }/{a["index"] }/{a["filename"]}" class="card-link">{ a["filename"] }</a>' for a in e['attachments']) }  
  </div>
</div>
    """


def message_list(messages):
    if "results" not in messages:
        return """<div class="alert alert-danger" role="alert"> No messages </div>"""
    messages = make_safe(messages)
    return fr"""
    <div class="row">
        <div class="col">
                { ''.join(render_message(e) for e in messages['results']) } 
        </div>
    </div>
    """


def attachment(request, email, message_uuid, attachment_index, filename):
    user_id = request["user"]["id"]
    if not user_id:
        return Response(
            f"""<html><a href="/_login?next={ request['path'] }"> Log in required.</a>"""
        )

    data = owns_email(user_id, email)
    if not data:
        return Response(
            base(request=request, title="Not found", body=f"<h1>Not Found</h1>"),
            status=404,
        )
    message = client.get(f"/_emails/{email}/msg/{message_uuid}/")["json"]
    attachment = message["attachments"][int(attachment_index)]
    return FileResponse(
        BytesIO(client.get(attachment["attachment_url"], format=None)["content"]),
        as_attachment=False,
        filename=attachment["filename"],
    )


def message(request, email, message_uuid):
    if not request["user"]["id"]:
        return Response(
            f"""<html><a href="/_login?next={ request['path'] }"> Log in required.</a>"""
        )

    user_id = request["user"]["id"]
    data = owns_email(user_id, email)
    if not data:
        return Response(
            base(request=request, title="Not found", body=f"<h1>Not Found</h1>"),
            status=404,
        )
    message = client.get(f"/_emails/{email}/msg/{message_uuid}/")["json"]
    if request["method"] == "POST" and "delete" in request["data"]:
        error = delete_message(email, message_uuid)
        if not error:
            return Response(status=302, headers={"location": fr"/{ email }/"})
        return Response(error)

    return Response(
        base(
            request=request, title=message["subject"], body=render_full_message(message)
        )
    )


def owns_email(user_id, email):
    email_resp = client.get(f"/_emails/{email}/")
    if email_resp["status_code"] != 200 or email_resp["json"]["user_id"] != user_id:
        return False
    return email_resp["json"]


def details(request, email):
    user_id = request["user"]["id"]
    if not user_id:
        return Response(
            f"""<html><a href="/_login?next={ request['path'] }"> Log in required.</a>"""
        )

    data = owns_email(user_id, email)
    if not data:
        return Response(
            base(request=request, title="Not found", body=f"<h1>Not Found</h1>"),
            status=404,
        )

    if request["method"] == "POST" and "delete" in request["data"]:
        error = delete_email(email)
        if not error:
            return Response(status=302, headers={"location": "/"})
        return Response(error)

    messages = client.get(f"/_emails/{email}/msg/")["json"]
    return Response(
        base(
            request=request,
            title=email,
            body=email_detail(get_email_details(email)) + message_list(messages),
        )
    )


def user_emails(user_id):
    next_url = rf"/_emails/?user_id={user_id}&page_size=10000"
    emails = []
    while next_url:
        j = client.get(next_url)["json"]
        next_url = j["next"]
        emails = emails + j["results"]
    return emails


def get_current_usage(emails):
    num_addresses = len(emails)
    messege_length_sum = 0
    message_count = 0
    for e in emails:
        message_count = message_count + e["message_count"]
        messege_length_sum = messege_length_sum + e["messege_length_sum"]

    present = arrow.utcnow()
    return {
        "num_addresses": num_addresses,
        "message_count": message_count,
        "messege_length_sum": messege_length_sum,
        "next_billing_cycle": present.replace(
            hour=0, minute=0, second=0, microsecond=0
        ).shift(hours=24),
        "sats_per_message": RATE["sats_per_message"],
        "sats_per_address": RATE["sats_per_address"],
        "sats_per_byte": RATE["sats_per_byte"],
        "sats_total": (
            Decimal(message_count * RATE["sats_per_message"])
            + Decimal(num_addresses * RATE["sats_per_address"])
            + Decimal(messege_length_sum * RATE["sats_per_byte"])
        ),
    }


def bill_users(request):
    if request["user"]["id"] != settings["OWNER"]["id"]:
        return Response("no")

    next_url = "/_accounts/?user_id__isnull=false&page_size=10000"
    accounts = []
    while next_url:
        j = client.get(next_url)["json"]
        next_url = j["next"]
        accounts = accounts + j["results"]

    for account in accounts:
        emails = user_emails(account["user_id"])
        account["usage"] = get_current_usage(emails)
        r = client.post(
            account["transfer_url"],
            {
                "amount": Decimal(account["usage"]["sats_total"]) / BTC,
                "currency": "BTC",
                "destination": settings["ACCOUNT"]["uuid"],
                "description": "billed for emails",
            },
        )
        account["r"] = r["json"]

    def default(obj):
        return str(obj)

    return Response(
        json.dumps({"accounts": accounts}, indent=2, default=default),
        content_type="application/json",
    )


def favicon(requests):
    return FileResponse(
        BytesIO(
            base64.decodebytes(
                b"""AAABAAEAEBAAAAAAAABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAQAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUFBQAFBQUABQUFAAUFBQAFBQUABQUFAAUFBQAFBQUABQ
UFAAUFBQAFBQUABQUFAAUFBQAAAAAAAAAAAAAAAAAFBQUABQUFAAUFBQAFBQUABQUFAAUFBQAFBQ
UABQUFAAUFBQAFBQUABQUFAAUFBQAFBQUAAAAAAAUFBQglBQUP9QUFAAUFBQAFBQUABQUFAAUFBQ
AFBQUABQUFAAUFBQAFBQUABQUFAAUFBQ/1BQUIJQUFAAAAAAAFBQUP8AAAAAUFBQAFBQUABQUFAA
UFBQAFBQUABQUFAAUFBQAFBQUABQUFAAUFBQAFBQUABQUFD/UFBQAAAAAABQUFD/AAAAAFBQUIJQ
UFD/UFBQ/1BQUP9QUFD/UFBQ/1BQUP9QUFD/UFBQ/1BQUIJQUFAAUFBQ/1BQUAAAAAAAUFBQ/wAA
AABQUFD/UFBQ/////////////////////////////////1BQUP9QUFD/UFBQAFBQUP9QUFAAAAAA
AFBQUP8AAAAAUFBQ//////9VVVX//////1hYWP9aWlr//////1paWv//////UFBQ/1BQUABQUFD/
UFBQAFBQUP9QUFD/AAAAAFBQUP///////////1hYWP///////////1tbW////////////1BQUP9Q
UFAAUFBQ/1BQUP8AAAAAUFBQ/wAAAABQUFD//////1dXV///////////////////////Xl5e////
//9QUFD/UFBQAFBQUP9QUFAAAAAAAFBQUP8AAAAAUFBQ/1BQUP//////////////////////////
//////9QUFD/UFBQ/1BQUABQUFD/UFBQAAAAAABQUFD/AAAAAFBQUIJQUFD/UFBQ/1BQUP9QUFD/
UFBQ/1BQUP9QUFD/UFBQ/1BQUIJQUFAAUFBQ/1BQUAAAAAAAUFBQ/wAAAABQUFAAUFBQAFBQUABQ
UFAAUFBQAFBQUABQUFAAUFBQAFBQUABQUFAAUFBQAFBQUP9QUFAAAAAAAFBQUIJQUFD/UFBQAFBQ
UABQUFAAUFBQAFBQUABQUFAAUFBQAFBQUABQUFAAUFBQAFBQUP9QUFCCUFBQAAAAAAAAAAAAAAAA
AFBQUABQUFAAUFBQAFBQUABQUFAAUFBQAFBQUABQUFAAUFBQAFBQUABQUFAAUFBQAFBQUAAAAAAA
AAAAAAAAAABQUFAAUFBQAFBQUABQUFAAUFBQAFBQUABQUFAAUFBQAFBQUABQUFAAUFBQAFBQUABQ
UFAA//8AAP//AAD//wAAn/kAAL/9AACgBQAAoAUAAKAFAAAgBAAAoAUAAKAFAACgBQAAv/0AAJ/5
AAD//wAA//8AAA=="""
            )
        ),
        content_type="image/vnd.microsoft.icon",
        headers={'Cache-Control': 'public, max-age=31536000',
        }
    )


urls = [
    (r"/$", home),
    (r"/(?P<email>\S+@\S+\.\S+)/$", details),
    (r"/(?P<email>\S+@\S+\.\S+)/(?P<message_uuid>[^/]+)/$", message),
    (
        r"/(?P<email>\S+@\S+\.\S+)/(?P<message_uuid>[^/]+)/(?P<attachment_index>[0-9]+)/(?P<filename>.+)$",
        attachment,
    ),
    (r"/bill_users", bill_users),
    (r"/favicon.ico", favicon),
]


def handle(request):
    for path_re, view in urls:
        m = re2.match(path_re, request["path"])
        if m:
            return view(request, **m.groupdict())

    for path_re, view in urls:
        m = re2.match(path_re, request["path"] + '/')
        if m:
            return Response(status=302, headers={"location": request["path"] + "/"})
    return Response(
        base(request=request, title="Page Not found", body=f"<h1> Page Not Found</h1>"),
        status=404,
    )


get = handle
post = handle
delete = handle


def http_error(data):
    return Response(json.dumps({"an error": data}), content_type="application/json")


def template_error(exception):
    return json.dumps({"template_error": exception})


def test_home():
    resp = handle({"path": "/", "user": {"username": "", "id": None}})
    resp = handle({"path": "/", "user": {"username": "bob2", "id": 2}})


def test_emails():
    resp = handle({"path": "/e/foo@example.com"})


def test_404():
    resp = handle({"path": "/non-existant"})


def test_http_error():
    resp = http_error({"some": "data"})
