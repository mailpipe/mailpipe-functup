from functup import print, Response, FileResponse, get_channel, APIClient
import json
import re2
import hashlib


def base(request, title, body):
    return rf'''<!doctype html>
<html lang="en">
  <head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">

    <title>{ title } | Mailpipe</title>
  </head>
  <body>
<nav class="navbar navbar-expand-md navbar-light bg-light">
    <div class="navbar-collapse collapse w-100 order-1 order-md-0 dual-collapse2">
        <ul class="navbar-nav mr-auto">
            <li class="nav-item active">
                <a class="nav-link" href="/">Home</a>
            </li>
        </ul>
    </div>
    <div class="mx-auto order-0">
        <a class="navbar-brand mx-auto" href="#">Mailpipe</a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target=".dual-collapse2">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
    <div class="navbar-collapse collapse w-100 order-3 dual-collapse2">
        <ul class="navbar-nav ml-auto">
      { fr"""
          <form class="form-inline" action="/_logout" method="POST">
            <button class=" btn btn-danger" type="submit">Logout</button>
            { csrf_input }
          </form>
        """ if request['user']['username'] else """
          <li class="nav-item ">
              <a class="nav-link" href="/_login">Log in</a>
          </li>
          <li class="nav-item ">
              <a class="btn btn-primary" href="/_join">Join Functup</a>
          </li>
        """ }
    </ul>
    </div>
</nav>
    <div class="container">
    { body }
</div>


    <!-- Optional JavaScript -->
    <!-- jQuery first, then Popper.js, then Bootstrap JS -->
    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
  </body>
</html>
    '''


def list_addresses(data):
    return fr'''
    <form action="/add_email" method="POST">
      <div class="form-group">
    <label for="exampleInputEmail1">Add email address</label>
    <input name="email" type="email" class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp" placeholder="Enter email">
  </div>
   <button type="submit" class="btn btn-primary">Submit</button>
    { csrf_input }
    </form>
    <h1>Email Addresses</h1>
    <ul class="list-group"> 
        { ''.join(rf'<li class="list-group-item">{ e["data"]["email"] }</li>' for e in data['results'] ) } 
    </ul>'''

def home(request):
    if not request["user"]["id"]:
        return Response(base(request=request, title='Login', body='hi there'))
    client = APIClient()

    r = client.get(f"/_data?data__owner={request['user']['username']}&path__startswith=v1/emails")
    return Response(base(request=request, title='Login', body=list_addresses(r['json'])))


def add_email(request):
    if not request["user"]["id"]:
        return Response(
            f"""<html>
    <a href='/_login?next=/'> Log in</a>
home"""
        )
    if request["method"] == "POST":
        client = APIClient()
        email = request["data"].get("email", None)
        if not email:
            return Response(request)
        email_account_hash = hashlib.sha1(email.encode()).hexdigest()
        owner = request["user"]["username"]
        email_path = f"v1/emails/{email_account_hash}.json"
        new_data_resp = client.post("/_data.json", {"path": email_path, "data": {"email": email, "owner": owner}})
        if new_data_resp["status_code"] == 201:
            new_account_resp = client.post("/_emails.json", {"address": email})
            if new_account_resp["status_code"] == 201:
                return Response(status=302, headers={"location": "/"})
        return Response(
            f"""<html>
        {email_path}
         {new_data_resp['status_code']}: {new_data_resp['json']}<br>
         {new_account_resp['status_code']}: {new_account_resp['json']}<br>
         """
        )


def edit(request, path):
    if not request["user"]["username"] in ["tim-admin", "tim"]:
        return Response("Not authorized")
    preview_url = request["query_params"].get("preview", path)
    if request["method"] == "POST":
        new_data = request["data"].get("data")
        new_data_resp = APIClient().put("/_data/" + path, {"path": path, "data": new_data})
        if new_data_resp["status_code"] == 200:
            return Response(headers={"location": f"{ request['path'] }?preview={preview_url or '/'}"}, status=302)
        return Response(new_data_resp, content_type="application/json")
    files = APIClient().get("/_data?path__startswith=" + path)
    data = {"path": path, "preview_url": preview_url, "files": files["json"]}
    return Response(data, template_name="edit.html")



def messages(request, email):
    if not request["user"]["id"]:
        return Response(
            f"""<html>
    <a href='/_login?next=/'> Log in required</a>"""
        )
    client = APIClient()

    owner = request["user"]["username"]
    r = client.get(f"/_data?data__owner={owner}&data__email={email}")
    if r["status_code"] == 200:
        r = client.get(f"/_emails/{email}/msg")
    return Response(r, template_name="emails.html")


urls = [(r"/$", home), (r"/add_email$", add_email), (r"/e/(?P<email>[^/]+)$", messages), (r"/edit/(?P<path>.+)$", edit)]


def handle(request):
    for path_re, view in urls:
        m = re2.match(path_re, request["path"])
        if m:
            return view(request, **m.groupdict())
    return Response("not found", status=404)


get = handle
post = handle


def http_error(data):
    return Response(json.dumps({"an error": data}), content_type="application/json")


def template_error(exception):
    return json.dumps({"exception_data": exception})


def test_home():
    resp = handle({"path": "/", "user": {"username": "", "id": None}})
    resp = handle({"path": "/", "user": {"username": "bob2", "id": 2}})


def test_emails():
    resp = handle({"path": "/e/foo@example.com"})


def test_404():
    resp = handle({"path": "/non-existant"})


def test_http_error():
    resp = http_error({"some": "data"})

